import requests
from telebot import types
from utils import load_servers, save_servers, generate_unique_id
from config import SERVERS_FILE_TEMPLATE, DEFAULT_SERVER, MAX_SERVERS

def servers_handler(bot, message):
    chat_id = message.chat.id
    servers = load_servers(chat_id, SERVERS_FILE_TEMPLATE, DEFAULT_SERVER)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:"
    keyboard = types.InlineKeyboardMarkup()

    for server_id, server_info in servers.items():
        button = types.InlineKeyboardButton(text=f"{server_info['name']} (ID: {server_id})", callback_data=f"status_{server_id}")
        keyboard.add(button)

    bot.reply_to(message, text=text, reply_markup=keyboard)

def status_callback(bot, call):
    chat_id = call.message.chat.id
    servers = load_servers(chat_id, SERVERS_FILE_TEMPLATE, DEFAULT_SERVER)
    server_id = call.data.split("_")[1]
    server_info = servers.get(server_id)

    if not server_info:
        bot.reply_to(call.message, text="–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    server_address = server_info["address"]
    response = requests.get(f"https://api.mcstatus.io/v2/status/bedrock/{server_address}")
    data = response.json()

    text = (f"ID: {server_id}\n"
            f"–°—Ç–∞—Ç—É—Å: {'üü¢–û–Ω–ª–∞–π–Ωüü¢' if data.get('online', False) else 'üî¥–û—Ñ—Ñ–ª–∞–π–Ωüî¥'}\n"
            f"üí≠–û–Ω–ª–∞–π–Ω: {data.get('players', {}).get('online')}/{data.get('players', {}).get('max')}\n"
            f"üåê–ê–π–ø–∏: <code>{data.get('host', '')}</code>\n"
            f"üåê–ü–æ—Ä—Ç: <code>{data.get('port', '')}</code>\n"
            f"üåê–í–µ—Ä—Å–∏—è: {data.get('version', {}).get('name')}")

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode="html")

def add_server_handler(bot, message):
    chat_id = message.chat.id
    servers = load_servers(chat_id, SERVERS_FILE_TEMPLATE, DEFAULT_SERVER)
    args = message.text.split(maxsplit=2)

    if len(args) != 3:
        bot.reply_to(message, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_server <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∞–π–ø–∏:–ø–æ—Ä—Ç>")
        return

    server_name, server_address = args[1], args[2]

    if ':' not in server_address or len(server_address.split(':')) != 2:
        bot.reply_to(message, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–π–ø–∏:–ø–æ—Ä—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <–∞–π–ø–∏>:<–ø–æ—Ä—Ç>")
        return

    if len(servers) >= MAX_SERVERS:
        bot.reply_to(message, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–∏–ª–∞—Å—å. –ü–æ—ç—Ç–æ–º—É –º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–æ –¥–µ–π—Å—Ç–≤–∏–π –°–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞")
        return

    server_id = generate_unique_id(servers.keys())

    servers[server_id] = {"name": server_name, "address": server_address}
    save_servers(chat_id, servers, SERVERS_FILE_TEMPLATE)
    bot.reply_to(message, text=f"–°–µ—Ä–≤–µ—Ä '{server_name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {server_id}")

def delete_server_handler(bot, message):
    chat_id = message.chat.id
    servers = load_servers(chat_id, SERVERS_FILE_TEMPLATE, DEFAULT_SERVER)
    args = message.text.split(maxsplit=1)

    if len(args) != 2:
        bot.reply_to(message, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_server <ID>")
        return

    server_id = args[1]
    if server_id == "1":
        bot.reply_to(message, text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä. –ü—Ä–∏—á–∏–Ω–∞: –°–æ–∑–¥–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return

    if server_id in servers:
        del servers[server_id]
        save_servers(chat_id, servers, SERVERS_FILE_TEMPLATE)
        bot.reply_to(message, text=f"–°–µ—Ä–≤–µ—Ä —Å ID: {server_id} —É–¥–∞–ª–µ–Ω.")
    else:
        bot.reply_to(message, text="–°–µ—Ä–≤–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")